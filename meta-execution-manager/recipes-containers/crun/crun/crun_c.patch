/**
**  Created by Lukas Stahlbock in 2022
**  Copyright (c) 2022 IAV GmbH Ingenieurgesellschaft Auto und Verkehr. All rights reserved.
**/
diff --git a/src/crun.c b/src/crun.c
index f77c01e..a6d7ec1 100644
--- a/src/crun.c
+++ b/src/crun.c
@@ -41,6 +41,7 @@
 #include "ps.h"
 #include "checkpoint.h"
 #include "restore.h"
+#include "batch.h"
 
 static struct crun_global_arguments arguments;
 
@@ -100,6 +101,7 @@ enum
   COMMAND_PS,
   COMMAND_CHECKPOINT,
   COMMAND_RESTORE,
+  COMMAND_BATCH,
 };
 
 struct commands_s commands[] = { { COMMAND_CREATE, "create", crun_command_create },
@@ -115,6 +117,7 @@ struct commands_s commands[] = { { COMMAND_CREATE, "create", crun_command_create
                                  { COMMAND_UPDATE, "update", crun_command_update },
                                  { COMMAND_PAUSE, "pause", crun_command_pause },
                                  { COMMAND_UNPAUSE, "resume", crun_command_unpause },
+                                 { COMMAND_BATCH, "batch", crun_command_batch },
 #ifdef HAVE_CRIU
                                  { COMMAND_CHECKPOINT, "checkpoint", crun_command_checkpoint },
                                  { COMMAND_RESTORE, "restore", crun_command_restore },
@@ -142,7 +145,8 @@ static char doc[] = "\nCOMMANDS:\n"
                     "\tstate       - output the state of a container\n"
                     "\tpause       - pause all the processes in the container\n"
                     "\tresume      - unpause the processes in the container\n"
-                    "\tupdate      - update container resource constraints\n";
+                    "\tupdate      - update container resource constraints\n"
+                    "\tbatch       - run one or multiple containers simultaneously\n";
 
 static char args_doc[] = "COMMAND [OPTION...]";
 
@@ -310,8 +314,26 @@ main (int argc, char **argv)
   if (arguments.debug)
     libcrun_set_verbosity (LIBCRUN_VERBOSITY_WARNING);
 
+  char* container_id;
+  if (strcmp(command->name, "create") == 0 || 
+      strcmp(command->name, "run") == 0 || 
+      strcmp(command->name, "start") == 0 ||
+      strcmp(command->name, "delete") == 0)
+  {
+    container_id = argv[argc-1];
+  } else if (strcmp(command->name, "kill") == 0)
+  {
+    container_id = argv[first_argument+1];
+  } else if (strcmp(command->name, "batch") == 0)
+  {
+    container_id = "command";
+  }
+  libcrun_warning("crun: %s container %s", command->name, container_id);
+
   ret = command->handler (&arguments, argc - first_argument, argv + first_argument, &err);
   if (ret && err)
     libcrun_fail_with_error (err->status, "%s", err->msg);
+
+  libcrun_warning("crun: %s container %s finished", command->name, container_id);
   return ret;
 }
